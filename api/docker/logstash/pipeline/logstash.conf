# The tcp input plugin for Logstash is designed to receive data over a TCP (Transmission Control Protocol)
# connection. TCP is one of the main protocols in the Internet Protocol (IP) suite and is used to establish
# a connection between a sender and a receiver.
input {
	tcp {
	    # This specifies the port number on which Logstash will listen for incoming TCP connections. In this case, Logstash is listening on port 5001.
		port => 5001
		# tags => ["webapp_logs"]: This adds a tag to each event received through this input. Tags are used within Logstash to filter and process events based on certain conditions. Here, every event that comes in through this TCP connection will be tagged with “webapp_logs”.
		tags => ["webapp_logs"]
		# This assigns a type to each event received through this input. The type is another way to group similar events for processing. In this case, the type is set to “webapp_logs”.
		type => "webapp_logs"
		# This instructs Logstash to use the JSON codec to decode the data received over the TCP connection. The codec determines how incoming data is parsed and structured into events. Since the codec is set to JSON, Logstash expects the incoming data to be formatted as JSON.
		codec => json
	}
}
# The output section in the logstash.conf file is where we define the destination for the data that Logstash has collected and possibly transformed.
output {
    # This is a conditional statement within the output section. It checks each event to see if it contains a field named LotArea. If such a field exists, the event is processed by the nested elasticsearch output configuration. Conditional statements are useful for routing events to different outputs based on their content.
	if [LotArea] {
	    # This specifies that the output destination for the events is an Elasticsearch server. Elasticsearch is a popular search and analytics engine, and Logstash can directly send data to it for indexing and storage.
		elasticsearch {
		    # This setting tells Logstash the address of the Elasticsearch server. In this case, it’s expected that there is a hostname elasticsearch that resolves to the server running Elasticsearch, and it’s listening on port 9200.
			hosts => "elasticsearch:9200"
			# These are the credentials Logstash will use to authenticate with the Elasticsearch server.
			user => "elastic"
			password => "changeme"
			# This setting determines the name of the index in Elasticsearch where the events will be stored. The index name is dynamic and includes the current date. For example, if an event is processed on December 19, 2023, it would be stored in an index named input_logs-2023.12.19. This allows for easy organization and retrieval of data based on time.
			index => "input_logs-%{+YYYY.MM.dd}"
		}
	# This part of the conditional handles events that do not have a LotArea field. These events are also sent to Elasticsearch but are stored in a different index.
	} else {
		elasticsearch {
			hosts => "elasticsearch:9200"
			user => "elastic"
			password => "changeme"
			# Similar to the previous index setting, this one also includes the current date in the index name. However, the base name of the index is webapp_logs, indicating that these events are related to web application logs. This separation of indices based on event content can help with managing and analyzing your data in Elasticsearch.
 			index => "webapp_logs-%{+YYYY.MM.dd}"
 		}
	}
}