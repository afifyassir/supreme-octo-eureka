# Specifies the version of the Docker Compose file format.
version: '3'
# Defines the different containers that make up our application. Each service represents a
# component of the application, such as the web server, database, or any other service our
# application requires.
services:
  # Each service can have its own configuration, which may include, image, build, environment, etc.
  ml_api:
    # The "Build" configuration contains the instructions for building a custom image from a Dockerfile,
    # including the context and the path to the Dockerfile.
    # context : .. means that it’s built from a Dockerfile located in the parent directory of the directory containing the docker-compose.yml.
    build:
      context: ..
      dockerfile: Dockerfile
    # The "Environment" contains all environment variables required by the service, which can be hardcoded or referenced from an environment file or the host environment.
    environment:
      # The hostname of the database service, which is set to database, the name of the service defined in the same docker-compose.yml file.
      DB_HOST: database
      # The port number on which the database service is listening, set to 5432, the default port for PostgreSQL.
      DB_PORT: 5432
      # The username for the database connection.
      DB_USER: user
      # The password for the database connection. It uses a placeholder ${DB_PASSWORD:-password} which
      # means it will take the value of the DB_PASSWORD environment variable from the host if it’s set; otherwise, it will default to password.
      DB_PASSWORD: ${DB_PASSWORD:-password}
      # The name of the database to connect to.
      DB_NAME: ml_api_dev
    # Dependencies between services, ensuring that services start in the correct order.
    depends_on:
      - database
      - cadvisor
    # Port mappings between the host and the container, allowing external access to the services running
    # inside the container. This means that any requests sent to port 5000 on the host machine will be
    # forwarded to port 5000 on the container where the ml_api service is running. It allows external access
    # to the service,
    ports:
      - "5000:5000"
    #  The command to be executed when the container starts.
    # make db-migrations: This part of the command triggers database migration scripts that set up or
    # update the database schema required by the application.
    # make run-service-wsgi: This part of the command starts the web service using a WSGI (Web Server Gateway Interface) server,
    # which is a standard interface between web servers and Python web applications.
    # The && operator ensures that the make run-service-wsgi command will only run if the make db-migrations
    # command completes successfully. This setup ensures that the database schema is up-to-date before the
    # web service starts serving requests.
    # The "make" utility is used to manage the execution of these commands, which are defined in a Makefile.
    # A Makefile is a special file that contains rules and dependencies for building or managing a project.
    command: bash -c "make db-migrations && make run-service-wsgi"

  database:
    # Specifies the Docker image to use for the service. postgres:latest means it will use the latest
    # version of the official PostgreSQL image from Docker Hub.
    image: postgres:latest
    # Sets environment variables within the container. These variables are used by the PostgreSQL
    # image to configure the default database user, password, and database name when the container
    # is first created.
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ml_api_dev
    # Maps ports between the host and the container. The format is host:container.
    # This maps port 6609 on the host to port 5432 on the container. Port 5432 is the default port that
    # PostgreSQL listens on. By mapping a different port on the host (6609), you can access the PostgreSQL
    # server from outside the Docker network using the host’s IP address and port 6609.
    ports:
      - "6609:5432"
    # In Docker, volumes are used to persist data generated by and used by containers. When you use
    # a volume, the data is stored on the host filesystem, but it is managed by Docker.
    # Think of a volume in Docker like a special folder on your computer that never gets deleted,
    # even if you remove the app that uses it. This special folder keeps all the important files safe,
    # so you can always get them back. the name of the volume is my_dbdata and "/var/lib/postgresql/data" is
    #  the path inside the container where the volume will be mounted. For the database service, which
    # uses the PostgreSQL image, this path is the default location where PostgreSQL stores its data files.
    # “Mounting” here means connecting the special folder my_dbdata (which is a volume in Docker) to a
    # specific place in the database container.
    volumes:
      - my_dbdata:/var/lib/postgresql/data

  prometheus:
    # Specifies the Docker image to use for the service. prom/prometheus is the official
    # Prometheus image from Docker Hub.
    image: prom/prometheus
    # Sets a custom name for the running container. In this case, the container will be named prometheus.
    container_name: prometheus
    volumes:
      # This mounts the local directory ./config/prometheus/ to the container’s directory /etc/prometheus/.
      - ./config/prometheus/:/etc/prometheus/
      # This mounts the named volume prometheus_data to the container’s directory /prometheus.
      # It ensures that Prometheus’s data persists across container restarts and removals.
      - prometheus_data:/prometheus
    # In Docker, when we run a container, it executes a default command that is specified in the Docker
    # image. However, we can override this default command with our own command when we start the
    # container and this is what the "command" option does.
    # The flag --config.file=/etc/prometheus/prometheus.yml is an instruction that tells Prometheus
    # to use the settings from this file located at /etc/prometheus/prometheus.yml inside our container.
    # This allows us to customize how Prometheus behaves and what it monitors based on the settings we’ve
    # defined in the prometheus.yml file.
    # --config.file is a command-line flag that Prometheus uses to specify which configuration file to
    # load when it starts up.
    # "/etc/prometheus/prometheus.yml" is the path to the configuration file inside the Prometheus container.
    # "etc" is a standard directory on Unix and Unix-like operating systems, including Linux, which is
    # used by the Prometheus container.
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # Docker containers can expose ports to communicate with each other. When we expose a port in the
    # docker-compose.yml file, we’re making that port available to other containers in the same Docker network(ml_api, database, grafana, etc).
    # However, this port is not accessible from outside of the Docker network, like from our host machine or the internet.
    expose:
      - 9090
    # This maps port 9090 on the host to port 9090 on the container, allowing us to access the
    # Prometheus web interface from the host machine.
    ports:
      - 9090:9090
    # Specifies that the prometheus service depends on the cadvisor service. This means that prometheus
    # will only start after cadvisor is up and running. cadvisor is  being used to collect container
    # metrics that Prometheus will monitor.
    depends_on:
      - cadvisor

  grafana:
    # Specifies the Docker image to use for the Grafana service. grafana/grafana is the
    # official Grafana image from Docker Hub.
    image: grafana/grafana
    # Lists dependencies for the Grafana service. Here, it’s specified that Grafana should start only
    # after the prometheus service is up and running. This is because Grafana will be using data from
    # Prometheus.
    depends_on:
      - prometheus
    # Maps ports between the host and the container. The format is host:container.
    #
    # This maps port 3000 on the host to port 3000 on the container, which is the default port
    # Grafana uses for its web interface. This allows us to access the Grafana dashboard from our
    # web browser by visiting http://localhost:3000 or http://<host-ip>:3000.
    ports:
      - 3000:3000
    # Defines data volumes to persist data. The format is volume_name:container_path.
    # This mounts the named volume grafana_data to the container’s directory /var/lib/grafana.
    # It ensures that Grafana’s data, such as dashboards, users, and settings, persists across
    # container restarts and removals.
    volumes:
      - grafana_data:/var/lib/grafana
    # Sets environment variables within the container. These variables configure certain aspects of Grafana.
    # GF_SECURITY_ADMIN_PASSWORD=foobar: Sets the admin password for Grafana to foobar. This is the
    # password we’ll use to log in to the Grafana dashboard as the admin user.
    # GF_USERS_ALLOW_SIGN_UP=false: Disables the ability for new users to sign up for accounts on the
    # Grafana dashboard. This is a security measure to control access to the dashboard.
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=foobar
      - GF_USERS_ALLOW_SIGN_UP=false

  cadvisor:
    # Specifies the Docker image to use for the cAdvisor service. google/cadvisor is the
    # official cAdvisor image from Google.
    image: google/cadvisor
    # Mounts directories from the host into the container. The format is host_path:container_path:permissions.
    # There are four mounts here
    volumes:
      # Mounts the root filesystem of the host to /rootfs inside the container as read-only (ro).
      # This allows cAdvisor to read information about the host filesystem.
      - /:/rootfs:ro
      # Mounts the /var/run directory of the host to the same path inside the container with read-write
      # (rw) permissions. This directory often contains runtime information, such as the Docker socket,
      # which cAdvisor uses to collect data.
      - /var/run:/var/run:rw
      # Mounts the /sys directory of the host to the same path inside the container as read-only (ro).
      # The /sys directory contains information about devices, drivers, and some kernel features,
      # which cAdvisor can use to gather performance metrics.
      - /sys:/sys:ro
      # Mounts the Docker data directory of the host to the same path inside the container as read-only(ro).
      # This allows cAdvisor to access detailed information about Docker containers.
      - /var/lib/docker/:/var/lib/docker:ro
    # This maps port 8080 on the host to port 8080 on the container, which is the default port
    # cAdvisor uses for its web UI. This allows us to access the cAdvisor web interface from our web
    # browser by visiting http://localhost:8080 or http://<host-ip>:8080.
    ports:
      - 8080:8080
# Declare volumes that can be used for persisting data generated by and used by Docker containers. Named volumes can be defined here and then referenced by services.
volumes:
  my_dbdata: {}
  prometheus_data: {}
  grafana_data: {}
